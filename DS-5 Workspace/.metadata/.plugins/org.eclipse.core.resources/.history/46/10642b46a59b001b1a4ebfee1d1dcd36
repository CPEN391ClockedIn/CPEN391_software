#include <stddef.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>

#define HW_REGS_BASE ( 0xff200000 )
#define HW_REGS_SPAN ( 0x00200000 )
#define HW_REGS_MASK ( HW_REGS_SPAN - 1 )
#define LEDS_OFFSET 0x20
#define HEX_OFFSET 0x30

int main(void)
{
	volatile unsigned int *Leds = NULL;
	volatile unsigned int *HEX = NULL;
	void *virtual_base;
	int fd;

	// Open /dev/mem
	if( ( fd = open( "/dev/mem", ( O_RDWR | O_SYNC ) ) ) == -1 ) {
		printf( "ERROR: could not open \"/dev/mem\"...\n" );
		return( 1 );
	}

	// get Virtual addr that maps to physical
	virtual_base = mmap( NULL, HW_REGS_SPAN, ( PROT_READ | PROT_WRITE ),MAP_SHARED, fd, HW_REGS_BASE );
	if( virtual_base == MAP_FAILED ) {
		printf( "ERROR: mmap() failed...\n" );
		close( fd );
		return(1);
	}

	// Get the address that maps to the LEDs and HEX
	Leds =(unsigned int *)(virtual_base + (( LEDS_OFFSET ) & (HW_REGS_MASK ) ));
	HEX =(unsigned int *)(virtual_base + (( HEX_OFFSET ) & (HW_REGS_MASK ) ));

	// Add 1 to PIO register
	*Leds = *Leds + 1;
	*HEX = *HEX + 1;

	// Test File I/O
	FILE* out_file = fopen("/home/root/word.txt","w+");
	fputs("Test String", out_file);
	fclose(out_file);



	// when finished, unmap the virtual space and close the memory "device"
	if( munmap( virtual_base, HW_REGS_SPAN ) != 0 ) {
		printf( "ERROR: munmap() failed...\n" );
		close( fd );
		return( 1 );
	}
	close( fd );
	return 0;
}

